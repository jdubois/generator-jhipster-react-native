import React from 'react';
import { TouchableHighlight, Modal, Text, View } from 'react-native';
import { connect } from 'react-redux';

import <%= entityNameCapitalized %>Actions from './<%= entityFileName %>.reducer';

import styles from './<%= entityFileName %>-styles'

function <%= entityNameCapitalized %>DeleteModal(props) {
    const { visible, setVisible, entity, navigation, testID } = props;

    const deleteEntity = () => {
        props.delete<%= entityNameCapitalized %>(entity.id);
        navigation.canGoBack() ? navigation.goBack() : navigation.navigate('<%= entityNameCapitalized %>');
    };
    return (
        <Modal animationType="slide" transparent={true} visible={visible}>
            <View testID={testID} style={styles.centeredView}>
                <View style={styles.modalView}>
                    <View style={[styles.flex, styles.flexRow]}>
                        <Text style={styles.modalText}>Delete <%= entityNameCapitalized %> {entity.id}?</Text>
                    </View>
                    <View style={[styles.flexRow]}>
                        <TouchableHighlight
                            style={[styles.openButton, styles.cancelButton]}
                            onPress={() => {
                                setVisible(false);
                            }}>
                            <Text style={styles.textStyle}>Cancel</Text>
                        </TouchableHighlight>
                        <TouchableHighlight style={[styles.openButton, styles.submitButton]} onPress={deleteEntity} testID="deleteButton">
                            <Text style={styles.textStyle}>Delete</Text>
                        </TouchableHighlight>
                    </View>
                </View>
            </View>
        </Modal>
    );
}

const mapStateToProps = (state) => {
    return {
        <%= entityInstance %>: state.<%= entityInstancePlural %>.<%= entityInstance %>,
        fetching: state.<%= entityInstancePlural %>.fetchingOne,
        deleting: state.<%= entityInstancePlural %>.deleting,
        errorDeleting: state.<%= entityInstancePlural %>.errorDeleting,
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        get<%= entityNameCapitalized %>: (id) => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>Request(id)),
        getAll<%= entityNamePlural %>: (options) => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>AllRequest(options)),
        delete<%= entityNameCapitalized %>: (id) => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>DeleteRequest(id)),
        reset<%= entityNamePlural %>: () => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>Reset()),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityNameCapitalized %>DeleteModal);
