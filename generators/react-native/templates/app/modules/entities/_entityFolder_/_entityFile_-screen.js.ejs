import React from 'react'
import { FlatList, Text, TouchableOpacity, View } from 'react-native'
import { connect } from 'react-redux'
import { useFocusEffect } from '@react-navigation/native';
<%_ if (searchEngineAny) { _%>
import SearchBar from '../../../shared/components/search-bar/search-bar'
<%_ } _%>
import <%= entityNameCapitalized %>Actions from './<%= entityFileName %>.reducer'
import styles from './<%= entityFileName %>-styles'
import AlertMessage from '../../../shared/components/alert-message/alert-message'

function <%= entityNameCapitalized %>Screen(props) {
  const [page, setPage] = React.useState(0);
  const [sort /*, setSort*/] = React.useState('id,asc');
  const [size /*, setSize*/] = React.useState(20);
  <%_ if (searchEngineAny) { _%>
  const [searchTerm, setSearchTerm] = React.useState('');
  <%_ } _%>

  const { <%= entityInstance %>, <%= entityInstance %>List, getAll<%= entityNamePlural %>, fetching } = props;

  useFocusEffect(
    React.useCallback(() => {
      console.debug('<%= entityNameCapitalized %> entity changed and the list screen is now in focus, refresh');
      setPage(0);
      fetch<%= entityNamePlural %>();
      /* eslint-disable-next-line react-hooks/exhaustive-deps */
    }, [<%= entityInstance %>, fetch<%= entityNamePlural %>]),
  );

  const renderRow = ({ item }) => {
    return (
      <TouchableOpacity onPress={() => props.navigation.navigate('<%= entityNameCapitalized %>Detail', { entityId: item.id })}>
        <View style={styles.listRow}>
          <Text style={styles.whiteLabel}>ID: {item.id}</Text>
          {/* <Text style={styles.label}>{item.description}</Text> */}
        </View>
      </TouchableOpacity>
    )
  }

  // Render a header
    <%_ if (searchEngineAny) { _%>
  const renderHeader = () =>
    <SearchBar onSearch={performSearch} searchTerm={searchTerm} onCancel={cancelSearch} />
    <%_ } _%>

  // Show this when data is empty
  const renderEmpty = () =>
    <AlertMessage title='No <%= entityNamePlural %> Found' show={!fetching} />

  const keyExtractor = (item, index) => `${index}`

  // How many items should be kept im memory as we scroll?
  const oneScreensWorth = 20

  <%_ if (searchEngineAny) { _%>
  const cancelSearch = () => {
    setSearchTerm('')
    fetch<%= entityNamePlural %>()
  }

  const performSearch = (query) => {
    if (query === '') {
      cancelSearch()
      return
    }
    setSearchTerm(query)
    props.performSearch(query)
  }
  <%_ } _%>
  const fetch<%= entityNamePlural %> = React.useCallback(() => {
    getAll<%= entityNamePlural %>({ page: page - 1, sort, size });
  }, [getAll<%= entityNamePlural %>, page, sort, size]);


  const handleLoadMore = () => {
    <%_ if (pagination === 'no') { _%>
    if (<%= entityInstance %>List.length) {
    <%_ } else { _%>
    if (page < props.links.next || props.links.next === undefined || fetching) {
    <%_ } _%>
      return
    }
    setPage(page + 1)
    fetch<%= entityNamePlural %>()
  }
  return (
    <View style={styles.container} testID='<%= entityInstance %>Screen'>
      <FlatList
        contentContainerStyle={styles.listContent}
        data={<%= entityInstance %>List}
        renderItem={renderRow}
        keyExtractor={keyExtractor}
        initialNumToRender={oneScreensWorth}
        onEndReached={handleLoadMore}
        ListEmptyComponent={renderEmpty}
        <%_ if (searchEngineAny) { _%>
        ListHeaderComponent={renderHeader}
        <%_ } _%>
      />
    </View>
  );
}

const mapStateToProps = (state) => {
  return {
    // ...redux state to props here
    <%= entityInstance %>List: state.<%= entityInstancePlural %>.<%= entityInstance %>List,
    <%= entityInstance %>: state.<%= entityInstancePlural %>.<%= entityInstance %>,
    fetching: state.<%= entityInstancePlural %>.fetchingAll,
    error: state.<%= entityInstancePlural %>.errorAll,
    <%_ if (pagination !== 'no') { _%>
    links: state.<%= entityInstancePlural %>.links,
    <%_ } _%>
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    <%_ if (searchEngineAny) { _%>
    performSearch: (query) => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>SearchRequest(query)),
    <%_ } _%>
    getAll<%= entityNamePlural %>: (options) => dispatch(<%= entityNameCapitalized %>Actions.<%= entityInstance %>AllRequest(options))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityNameCapitalized %>Screen)
