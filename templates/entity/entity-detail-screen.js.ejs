import React from 'react'
import { ScrollView, Text } from 'react-native'
import { connect } from 'react-redux'
import { Actions as NavigationActions } from 'react-native-router-flux'

import <%= props.name %>Actions from './<%= props.kebabName %>.reducer'
import RoundedButton from '../../../shared/components/rounded-button/rounded-button'
import styles from './<%= props.kebabName %>-entity-detail-screen-style'

class <%= props.name %>EntityDetailScreen extends React.Component {
  constructor (context, props) {
    super(context, props)
    this.state = {
      entityId: props.entityId,
      <%= camelCase(props.name) %>: {}
    }
  }

  componentWillMount () {
    this.props.get<%= props.name %>(this.props.entityId)
  }

  componentWillReceiveProps (newProps) {
    if (newProps.<%= camelCase(props.name) %>) {
      this.setState({ <%= camelCase(props.name) %>: newProps.<%= camelCase(props.name) %> })
    }
  }

  render () {
    return (
      <ScrollView style={styles.container}>
        <Text>ID: {this.state.<%= camelCase(props.name) %>.id}</Text>
        <%_ props.entityConfig.fields.forEach(function (field) { _%>
        <Text><%= upperFirst(field.fieldName) %>: {this.state.<%= camelCase(props.name) %>.<%= field.fieldName %>}</Text>
        <%_ }) _%>
        <RoundedButton text='Edit' onPress={NavigationActions.<%= camelCase(props.name) %>EntityEdit.bind(this, { entityId: this.state.<%= camelCase(props.name) %>.id })} />
      </ScrollView>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    <%= camelCase(props.name) %>: state.<%= camelCase(props.pluralName) %>.<%= camelCase(props.name) %>
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    get<%= props.name %>: (id) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>Request(id))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= props.name %>EntityDetailScreen)
