import React from 'react'
import { Alert, ScrollView, Text } from 'react-native'
import { connect } from 'react-redux'
import { Navigation } from 'react-native-navigation'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'
import RoundedButton from '../Components/RoundedButton'
import { <%= camelCase(props.name) %>EntityEditScreen } from '../Navigation/Layouts'
<%_ if (props.entityContainsLocalDate) { _%>
import { jsDateToLocalDate } from '../Transforms/DateTransforms'
<%_ } _%>

// Styles
import styles from './Styles/<%= props.name %>EntityDetailScreenStyle'

class <%= props.name %>EntityDetailScreen extends React.Component {
  constructor (context, props) {
    super(context, props)
    Navigation.events().bindComponent(this)
    this.state = {
      entityId: props.entityId,
      <%= camelCase(props.name) %>: {},
      deleting: false
    }
  }

  componentWillMount () {
    this.props.get<%= props.name %>(this.props.entityId)
  }

  componentWillReceiveProps (newProps) {
    if (newProps.<%= camelCase(props.name) %>) {
      this.setState({ <%= camelCase(props.name) %>: newProps.<%= camelCase(props.name) %> })
    }

    if (this.state.deleting && newProps.deleting === false) {
      if (!newProps.errorDeleting) {
        this.props.getAll<%= props.pluralName %>()
        NavigationActions.pop()
      } else {
        Alert.alert('Error', 'Something went wrong deleting the entity', [{text: 'OK'}])
        this.setState({
          success: false,
          requesting: false
        })
      }
    }
  }

  confirmDelete = () => {
    Alert.alert(
      'Delete <%= props.name %>?',
      'Are you sure you want to delete the <%= props.name %>?',
      [
        {text: 'Cancel', style: 'cancel'},
        {
          text: 'OK',
          onPress: () => {
            this.setState({ deleting: true }, () => {
              this.props.delete<%= props.name %>(this.props.entityId)
            })
          }
        }
      ],
      { cancelable: false }
    )
  }

  render () {
    return (
      <ScrollView style={styles.container}>
        <Text>ID: {this.state.<%= camelCase(props.name) %>.id}</Text>
        <%_ props.entityConfig.fields.forEach(function (field) { _%>
        <%_ if (field.fieldType === 'LocalDate') { _%>
        <Text><%= upperFirst(field.fieldName) %>: {jsDateToLocalDate(this.state.<%= camelCase(props.name) %>.<%= field.fieldName %>)}</Text>
        <%_ } else if (field.fieldType === 'ZonedDateTime') { _%>
        <Text><%= upperFirst(field.fieldName) %>: {String(this.state.<%= camelCase(props.name) %>.<%= field.fieldName %>)}</Text>
        <%_ } else { _%>
        <Text><%= upperFirst(field.fieldName) %>: {this.state.<%= camelCase(props.name) %>.<%= field.fieldName %>}</Text>
        <%_ } _%>
        <%_ }) _%>
        <RoundedButton text='Edit' onPress={<%= camelCase(props.name) %>EntityEditScreen.bind(this, { entityId: this.state.<%= camelCase(props.name) %>.id })} />
        <RoundedButton text='Delete' onPress={this.confirmDelete} />
      </ScrollView>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    <%= camelCase(props.name) %>: state.<%= camelCase(props.pluralName) %>.<%= camelCase(props.name) %>,
    deleting: state.<%= camelCase(props.pluralName) %>.deleting,
    errorDeleting: state.<%= camelCase(props.pluralName) %>.errorDeleting
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    get<%= props.name %>: (id) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>Request(id)),
    getAll<%= props.pluralName %>: (options) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>AllRequest(options)),
    delete<%= props.name %>: (id) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteRequest(id))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= props.name %>EntityDetailScreen)
